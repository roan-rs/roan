name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  PROJECT_NAME: roan-cli
  BINARIES_DIR: release_binaries

jobs:
  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
          GITHUB_REPO: ${{ github.repository }}

  build:
    name: Build for multiple platforms
    needs: changelog
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: linux-amd64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # Uncomment if needed
          # - name: win-amd64
          #   os: windows-latest
          #   target: x86_64-pc-windows-msvc
          - name: macos-amd64
            os: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Install OpenSSL (macOS only)
        if: startsWith(matrix.target, 'x86_64-apple-darwin') || startsWith(matrix.target, 'aarch64-apple-darwin')
        run: brew install openssl

      - name: Set OpenSSL environment variables (macOS only)
        if: startsWith(matrix.target, 'x86_64-apple-darwin') || startsWith(matrix.target, 'aarch64-apple-darwin')
        run: |
          echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build Binary
        run: cargo build --verbose --locked --release --target ${{ matrix.target }} --bin ${{ env.PROJECT_NAME }}

      - name: Archive Binary
        run: |
          mkdir -p ${{ env.BINARIES_DIR }}
          cp target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }} ${{ env.BINARIES_DIR }}/${{ env.PROJECT_NAME }}-${{ matrix.name }}

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARIES_DIR }}-${{ matrix.name }}
          path: ${{ env.BINARIES_DIR }}

  release:
    name: Create a new release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Linux Binaries
        uses: actions/download-artifact@v4
        with:
          name: release_binaries-linux-amd64

      - name: Download macOS AMD64 Binaries
        uses: actions/download-artifact@v4
        with:
          name: release_binaries-macos-amd64

      - name: Download macOS ARM64 Binaries
        uses: actions/download-artifact@v4
        with:
          name: release_binaries-macos-arm64

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release_binaries-*/${{ env.PROJECT_NAME }}-*
            CHANGES.md
          tag_name: ${{ github.ref }}
          name: ${{ github.ref }}
          body: ${{ needs.changelog.outputs.release_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  core_publish:
    name: Publish core crates to crates.io
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Publish core crates
        run: |
          for crate_dir in core/*; do
            if [ -f "$crate_dir/Cargo.toml" ]; then
              cd "$crate_dir"
              cargo publish --token "${{ secrets.CRATES_IO_TOKEN }}" || echo "Skipping: already published"
              cd -
            fi
          done
