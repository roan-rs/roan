name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  PROJECT_NAME: roan-cli
  BINARIES_DIR: release_binaries

jobs:
  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
          GITHUB_REPO: ${{ github.repository }}

  build:
    name: Build for multiple platforms
    needs: changelog
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: linux-amd64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: win-amd64
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - name: macos-amd64
            os: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Install OpenSSL (macOS only)
        if: startsWith(matrix.target, 'x86_64-apple-darwin') || startsWith(matrix.target, 'aarch64-apple-darwin')
        run: brew install openssl

      - name: Set OpenSSL environment variables (macOS only)
        if: startsWith(matrix.target, 'x86_64-apple-darwin') || startsWith(matrix.target, 'aarch64-apple-darwin')
        run: |
          echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build Binary
        run: cargo build --verbose --locked --release --target ${{ matrix.target }} --bin ${{ env.PROJECT_NAME }}

      - name: Prepare Binary
        shell: bash
        run: |
          # Create a directory for binaries if it doesn't exist
          mkdir -p ${{ env.BINARIES_DIR }}
          
          BIN_SUFFIX=""
          if [[ "${{ matrix.name }}" == "win-amd64" ]]; then
            BIN_SUFFIX=".exe"
          fi
          
          BIN_OUTPUT="target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}${BIN_SUFFIX}"
          cp "${BIN_OUTPUT}" "${{ env.BINARIES_DIR }}/"

      - name: List binaries
        run: |
          echo "Contents of ${{ env.BINARIES_DIR }}:"
          ls -l ${{ env.BINARIES_DIR }}

  upload:
    name: Upload the release
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          body: ${{ needs.changelog.outputs.release_body }}
          file: ${{ env.BINARIES_DIR }}/*

      - name: Check for uploaded files
        run: |
          echo "Trying to upload files:"
          ls -l ${{ env.BINARIES_DIR }}
