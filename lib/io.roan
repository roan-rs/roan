pub fn format(msg: string, ...args: string) -> string {
    let str = "";
    let chars = msg.chars();
    let last = 0;

    let i = 0;
    while i < chars.len() {
        if chars[i] == "{" && chars[i + 1] == "}" {
            chars = chars.next();

            if args[last] == null {
                str += "{}";
            } else {
                str += __format(args[last]);
                last += 1;
            }
        } else {
            str += chars[i];
        }

        i += 1;
    }

    return str;
}

pub fn print(msg: string, ...args: string) -> void {
    if args.len() == 0 {
        __print(msg);
    } else {
        __print(format(msg, ...args));
    }

    return;
}

pub fn println(msg: string, ...args: string) -> void {
    print(msg, ...args);
    print("\n");
}

pub fn eprint(msg: string, ...args: string) -> void {
    if args.len() == 0 {
        __eprint(msg);
    } else {
        __eprint(format(msg, ...args));
    }

    return;
}

pub fn eprintln(msg: string, ...args: string) -> void {
    eprint(msg, ...args);
    eprint("\n");
}

pub trait Debug {
    pub fn fmt(self) -> string;
}