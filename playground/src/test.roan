use { println, print, format, Debug } from "std::io";
use { pid } from "std::process";

pub struct Person {
    name: string,
    age: int,
    occupation: string,
}

trait PersonTrait {
    fn new(name: string, age: int, occupation: string) -> Self;
    fn get_name(self) -> string;
    fn get_age(self) -> int;
    fn get_occupation(self) -> string;
    fn introduce(self) -> void;
}

impl Person {
    pub fn new(name: string, age: int, occupation: string) -> Person {
        return Person {
            name: name,
            age: age,
            occupation: occupation,
        };
    }
}

impl PersonTrait for Person {
    fn new(name: string, age: int, occupation: string) -> Person {
        return Person::new(name, age, occupation);
    }

    fn get_name(self) -> string {
        return self.name;
    }

    fn get_age(self) -> int {
        return self.age;
    }

    fn get_occupation(self) -> string {
        return self.occupation;
    }

    fn introduce(self) -> void {
        println("Introducing a new person: {}", self.fmt());

        throw "This is an error!";
    }
}

impl Debug for Person {
    fn fmt(self) -> string {
        return format("Person {{ name: {}, age: {}, occupation: {} }}", self.get_name(), self.get_age(), self.get_occupation());
    }
}

pub fn introduce_person(name: string, age: int, occupation: string) -> void {
    let person = Person::new(name, age, occupation);

    person.introduce();
}
